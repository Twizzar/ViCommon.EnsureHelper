using System;
using Microsoft;
using ViCommon.EnsureHelper.ArgumentHelpers;

namespace ViCommon.EnsureHelper
{
    /// <summary>
    /// Helper for validating parameters.
    /// </summary>
    public interface IEnsureHelper
    {
        #region delegates

        /// <summary>
        /// Callback throw delegate.
        /// </summary>
        /// <param name="exception">The exception throwed by the ensure helper.</param>
        /// <param name="callerInformation">The caller information.</param>
        public delegate void EnsureHelperThrowCallback(Exception exception, CallerInformation callerInformation);

        /// <summary>
        /// Callback fail delegate.
        /// </summary>
        /// <param name="exception">The exception generated by the ensure helper.</param>
        public delegate void EnsureHelperFailCallback(Exception exception);

        #endregion

        #region members

        /// <summary>
        /// Register an action invoked when a check fails.
        /// </summary>
        /// <param name="failCallback">The callback action.</param>
        void RegisterOnFailureCallbacks(EnsureHelperFailCallback failCallback);

        /// <summary>
        /// Register an action invoked when the helper throws an exception.
        /// </summary>
        /// <param name="throwCallback">The callback action.</param>
        void RegisterOnThrowCallbacks(EnsureHelperThrowCallback throwCallback);

        /// <summary>
        /// Gets a parameter validation helper for validating method arguments.
        /// </summary>
        /// <typeparam name="TParam">The type of the parameter.</typeparam>
        /// <param name="argument">The argument value.</param>
        /// <param name="argumentName">The argument name.</param>
        /// <returns>An <see cref="IParameterValidator{TParam}"/>.</returns>
        IParameterValidator<TParam> Parameter<TParam>([ValidatedNotNull] TParam argument, string argumentName);

        /// <summary>
        /// Get a parameter validation helper for multiple parameters.
        /// parameters can be added with: <code>.WithParameter(param, nameof(param))</code>
        /// </summary>
        /// <typeparam name="TParam">The type of the parameters.</typeparam>
        /// <returns>An <see cref="ParameterValidatorCollection{TParam}"/>.</returns>
        public ParameterValidatorCollection<TParam> Many<TParam>();

        /// <summary>
        /// Get a parameter validation helper for multiple parameters.
        /// parameters can be added with: <code>.WithParameter(param, nameof(param))</code>
        /// </summary>
        /// <returns>An <see cref="ParameterValidatorCollection{TParam}"/>.</returns>
        public ParameterValidatorCollection<object> Many();

        #endregion
    }
}